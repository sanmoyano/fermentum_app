CLASE 03

//1) Necesitamos la variable React en scope
/*ES6 Modules*/ import React from 'react'

//2) Necesitamos la variable ReactDOM en scope
import ReactDOM from 'react-dom'

//3) Necesitamos un componente en scope, generalmente esta en otro archivo y se importa.
// const App = () => "Hola Mundo"
import App from './App'
import "./styles.css"

//4) Necesitamos poner el componente en el DOM
ReactDOM.render(<App/>, document.getElementById("root"))

La carpeta siempre se debe llamar src/ 
La rama para que corra react es :
    src/
        |_index.js

JSX: JS + XML
const App = () => {}

En JSX va ser 
    App () === <App/>

<===== FRAGMENT =====> 

Utilizar una etiqueta invisible en el dom para cargar los elementos <fragment> o <> ejemplo :
    const App = () => {
        return (
            <>
                <header> header </header>
                <footer> Footer </footer>
            </> 
        )
    }

rafce => atajo para crear el componente de React 
------------------------------------------------------------------------------------------

CLASE 04 

<===== COMPONENTES =====>

1) Siempre son funciones
2) Siempre retornan algo
3) Siempre arrancan en mayuscula
4) Siempre retornan una sola cosa
5) Siempre pueden recibir props
6) Los props son de SOLO LECTURA
7) Los componentes pueden tener estado (State): son variable internas de un componente las cuales pueden mantener su valor a traves del tiempo a pesar de la re-ejecucion del mismo componente.
8) Los componentes tienen un ciclo de vida separado en tres categorias: 
    - Mounting: Cuando el componente se monta en el DOM
    - Updating: Cuando el componente se actualiza
    - Unmounting: Cuando el componente se desmonta del DOM
9) Los componentes vuelven a renderizar (por el usuario o por otra cosa=) su contenido cuando: 
    - Se actualiza el estado
    - Se recibe un nuevo prop 
    - Su padre se renderiza de nuevo
    - Cuando cambia el contexto 


CONTAINER VS PRESENENTACIONALES: 
Todos los CONTAINER llevan el nombre CONTAINER por ejemplo ItemListContainer, como en el programa. 

COMPONENTES PRESENENTACIONALES : Son componentes que sirven mas que nada para mostrar algo en pantalla, por lo general no buscan la info en el exterior sino que la reciben como props.

COMPONENTES CONTAINER : Son componentes que necesitan de una API externa o la generan/leen de algun lugar para funcionar

<===== FUNCIONES =====>
VANILLA JS 

function foo(nombre,edad){ ---> uno le tiene que cargar la cantidad de parametros que quiere recibir 
    nombre = "Otro Nombre"
    console.log(nombre)
}

foo("Horacio",32)

REACT JS

function Foo(parametros){ ---> un solo parametro
    console.log(nombre)
}

<Foo nombre="Horacio" edad="32"/>

Parametros de la funcion == "props"

function Foo(props){
    console.log(nombre)
}

<===== DESTRUCTURING =====>

const arr = [1,2,3]

Forma convencional
const uno = arr[0]
const dos = arr[1]
const tres = arr[2]

array DESTRUCTURING
const [uno,dos,tres] = arr

Tenes que crear una constante llamada uno, dos y tres que valgan lo que haya en arr en esa posicion

const obj = {x:1,y:2,z:3}

Forma convencional
const x = obj.x
const y = obj.y
const z = obj.z

objeto DESTRUCTURING
const {x:x,y:y,z:z} = obj
const {x:miVariable,y:y,z:z} = obj
const {x,y,z} = obj ---> OBJECT PROPERTY SHORTHAND

creame una constante llamada x que valga lo que haya en obj en la propiedad x
{x:x} la de la derecha es la que creamos nosotros equivalente a la forma convencional y puede tener cualquier nombre y la de la izquierda es la que ya existe la que esta dentro del objeto.

OBJECT PROPERTY SHORTHAND

const nombre = "Horacio"

const persona = {
    nombre : nombre
}

const persona = { nombre }
----------------------------------------------------------

CLASE 05 

/*==== Repaso de funciones flecha ====*/

function foo () {
    return "hola mundo" 
}

es lo mismo que 

const foo = () => {
    return "hola mundo" 
}

foo es el nombre de la variable donde esta declarada la funcion. 

Podemos sacar las llaves de la funcion si solo si tenemos una sola expresion dentro de la funcion o una sola linea. 

const foo = () => /*return*/ "hola mundo" --> siempre hay un retorno indirecto, aunque no este escrito 

Con parametros 

const foo = (a) => {
    a * 2
}

const foo = a => a * 2

Con objetos 

function foo () {
    return {saludo: "Hola mundo"}
}

const foo = () => ({saludo: "Hola mundo"}) --> retornar un bojeto 
const foo = ({a}) => a * 2 ----> en caso de que {a} sea un objeto 

<===== HOOKS =====> 

HOOKS (ganchos): Son funciones que se le permiten al componente tener funcionalidad que noes parte de su comportamiento natural. Si o si se ejecutan adentro del componente y no se pueden ejecutar fuera de el. No pueden estar adentro de condicionales, loops, etc. 
    
    - useState: Permite crear una variable de estado en el componente, puede o no llevar un parametro y su resultado es siempre un array con dos cosas dentro. La primera es el valor del estado y la segunda una funcion para modificar ese estado. LOS ESTADOS SOLO PUEDEN CAMBIAR EJECUTANDO LA FUNCION QUE VIENE EN EL HOOK.
    - useEffect: 
    - useContext: 

    otros HOOKS
    - useReducer: para situaciones de estado mas complejos 
    - useRef: se usa en conjunto con el DOM
    - useCallback
    - useMemo
    

DESAFIO 05
1 - Crear un componente ItemCount.js
2 - Adentro del componente hay un texto y tres botones : Incrementar, Decrementar y agregar al carrito
3 - Adentro del componente tambien hay un estado que controla un contador
4 - El componente recibe 3 props : stock(que es un numero) , initial(que es un numero) y onAdd(que es una funcion)
5 - El componente tiene una funcion que se ejecuta cuando se hace click en el boton de + y aumenta el contador si y solo si no se excede el stock
6 - El componente tiene una funcion que se ejecuta cuando se hace click en el boton de - y disminuye el contador si y solo si no se llega a 1
7 - Cuando se haga click en agregar se ejecuta la funcion onAdd y le pasa como parametro el valor del contador si no se excede el stock


----------------------------------------------------
CLASE 06

class App extendes React.Component { todo esto es viejo ya se dejo de usar.
    constructor (){}

    render (){}

    ComponentDidMount(){}

    ComponentDidUpdate(){}

    ComponentWillUnmount() {}

    ShouldComponentUpdate(){}
}

import ItemCount from "./ItemCount"
import ItemList from "./ItemList"
import Item from "./Item"

import { useState } from "react"
import { useEffect } from "react"

let productosIniciales = []

const ItemListContainer = () => {
    
    
    const [loading, setLoading] = useState(true)
    const [productos, setProductos] = useState ([])

    //useEffect(function, [array]) => void
    //Este useEffect se va ejecutar en el primer render y despues de cada render. Los efectos pasan despues del render
    useEffect (() => { 
        console.log("Ejecutando useEffect")
        //Aca quiero pedir los productos
        setTimeout (() => {
            setProductos(productosIniciales)
        }, 5000)
    }, []) // se agrega el array de dependencia vacio para que solo se ejecute una sola vez. O se pueden agregar estados del mismo u otros componentes dentro del array.
    
    return (
        <div className="greeting__content">
            <h2>Bienvenido</h2>
            <button onClick={() => setLoading(!loading)}>toggle</button>
        </div>
    )
}
/**
 * 
 * 1- Arranca el componente la primera vez (mount)
 * 2- Se hace el primer render
 * 3- Conseguir la info
 * 4- Vuelvo a renderizar el componente 
 * 
 * 
 */


Promesa : Objecto que representa una operaciÃ³n asincrona que notifica cuando termina bien o mal.

new Promise((res,rej)=>{

})

$.ajax().then().catch()

fetch().then().catch()

algunaFuncion().then().catch()


REGLAS DE LAS PROMESAS

fetch => Promise {}

fetch.then() => Response {}

Response {} => Response.json()

Response.json()  => Promise {}

Si tenes una promesa suelta : continuas con un .then
Si tenes una promesa adentro de un .then : retornas esa promesa y continuas con un .then abajo


Web Services : SOAP, REST, GraphQL, etc.
------------------------------------------------------------

CLASE 07 
Consumiendo APIs
COMPONENTES CONTAINER son los componentes que neceisatn de una API externa o la generan/leen de algun lugar para funcionar

-----------------------------------------------------------

CLASE 08 

BrowserRouter : Router que se usa en el navegador con la API History
HashRouter : Router que se usa en el navegador con la API Location
MemoryRouter : Router que guarda la navegacion en memoria
StaticRouter : Router que se usa en el servidor (SSR)
NativeRouter : Route que se usa en mobile




--------------------------------------
CLASE 09 
Eventos 

Para que un componente hijo le pase informacion aun componente padre. Usando estados y pasando la funcion de cambio de estados desde el mas alto al mas bajo. 

- Padre le pasa una funcion al Hijo como props
- El componente hijo recibe esa funcion y decide cuando ejecutarla. 
- Cuando el hijo termine de ejecutar la funcion, indirectamente se ejecuta en el padre, por que fue creada ahi. Es un callback
- Como el componente hijo la esta ejecutando, todas las variables del componente hijo estan disponibles. Entonces puedo pasar algo desde el hijo hacia el Padre. 

UNA FUNCION QUE CARECE DE RETORNO, DEVUELVE UNDEFINED
Como escribrir la funcion para ejecutar un evento en react

const hacerClick = () => {
    console.log("Click")
}

<button onClick = {hacerClick}> click </button> 



useParams ===> usar el mismo nombre que coloco en la Route para leer el parametro que esta despues de los dos puntos 

 <Route path="/estilo/:idCategoria" element={<ItemDetailContainer />}></Route>
const { idCategoria } = useParams()

 --------------------------
 CLASE 10 
 useContext - Context APIs
 Context API: Implementacion del patron de publicacion/suscripcion de JS. pub/sub. Se trata de obtener un lugar de almacenamiento "global", una especie de variable. Creamos un lugar de almacenamiento llamdo CONTEXTO, funciona como un estado mas. Cualquier componente se puede suscribir a cambios en el contexto. Podemos publicarle cosas desde cualquier componente, publicar cambios. El contexto se crea una sola vez. 

 Hay que crear un componente que se dedique unicamente a la logica del contexto

 Un contexto por cada funcionalidad. Por cada cosa que tenga su propia logica. 

 
IMPLEMENTACION DE CONTEXTO : 
1) Crear el contexto con createContext (crear el lugar de almacenamiento en cualquier archivo importando desde React) Cuando creamos el contexto nos devuelve un objeto createContext() = {objeto} y nos da dos componentes que necesitamos. Provider y Consumer. No vamos a usar Consumer. 
2) Sacar el Provider de adentro del contexto
3) Export de contexto y Provider

LEER EL CONTEXTO
4) Vas al componente donde queres leer algo del contexto que este mucho mas por abajo de donde se creo el contexto. 
5) Traes el hook useContext
6) Traes el objeto contexto
7) useas el hook como useContext(contexto)

PATRON PROVIDER / CAMBIAR EL CONTEXTO
8) Crear un componente nuevo que va a usar el contexto. El Provider se encarga de establecer el valor del contexto con value = {}
9) En el retorno usas el Provider con su prop value (que setea el valor del contexto)

FUNCIONALIDAD DEL CARRITO 
- Agregar un objeto al carrito
- Eliminar un objeto del carrito
- Vaciar el carrito
- Obtener la cantidad de items en el carrito 
- Calcular precio total de compra 
